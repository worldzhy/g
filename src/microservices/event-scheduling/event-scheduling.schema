// !! ------------------------------------------------------------ //
// !!            [Microservice] Event scheduling models            //
// !! ------------------------------------------------------------ //
// * AvailabilityExpression                                        //
// * AvailabilityTimeslot                                          //
// * Event                                                         //
// * EventChangeLog                                                //
// * EventContainer                                                //
// * EventHost                                                     //
// * EventIssue                                                    //
// * EventType                                                     //
// * EventVenue                                                    //
// * Reservation                                                   //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ //

enum AvailabilityExpressionStatus {
  EDITING
  PUBLISHING
  PUBLISHED

  @@schema("microservice/event-scheduling")
}

enum AvailabilityTimeslotStatus {
  USABLE
  USED

  @@schema("microservice/event-scheduling")
}

enum EventIssueType {
  ERROR_NONEXISTENT_COACH
  ERROR_UNCONFIGURED_COACH
  ERROR_UNAVAILABLE_EVENT_TIME
  ERROR_CONFLICTING_EVENT_TIME
  ERROR_UNAVAILABLE_EVENT_TYPE
  ERROR_UNAVAILABLE_EVENT_VENUE
  WARNING_HAS_MORE_SUITABLE_COACH

  @@schema("microservice/event-scheduling")
}

enum EventIssueStatus {
  UNREPAIRED
  REPAIRED

  @@schema("microservice/event-scheduling")
}

enum EventContainerStatus {
  EDITING
  PUBLISHED

  @@schema("microservice/event-scheduling")
}

enum EventChangeLogType {
  SYSTEM
  USER

  @@schema("microservice/event-scheduling")
}

enum EventStatus {
  EDITING
  LOCKED
  PUBLISHING
  PUBLISHED

  @@schema("microservice/event-scheduling")
}

enum EventHostStatus {
  ACTIVE
  INACTIVE

  @@schema("microservice/event-scheduling")
}

model AvailabilityExpression {
  id                                     Int                          @id @default(autoincrement())
  name                                   String?
  status                                 AvailabilityExpressionStatus @default(EDITING)
  hostId                                 String                       @db.Uuid
  venueIds                               Int[]
  cronExpressionsOfAvailableTimePoints   String[]
  cronExpressionsOfUnavailableTimePoints String[]
  dateOfOpening                          DateTime
  dateOfClosure                          DateTime?
  minutesOfDuration                      Int // Generally it should be 30 or 60
  reportedAt                             DateTime
  createdAt                              DateTime                     @default(now())
  updatedAt                              DateTime                     @updatedAt
  timeslots                              AvailabilityTimeslot[]

  @@schema("microservice/event-scheduling")
}

model AvailabilityTimeslot {
  id                Int                        @id @default(autoincrement())
  status            AvailabilityTimeslotStatus @default(USABLE)
  hostId            String                     @db.Uuid
  venueIds          Int[]
  datetimeOfStart   DateTime
  datetimeOfEnd     DateTime
  minutesOfTimeslot Int                        @default(5)
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  expression        AvailabilityExpression     @relation(fields: [expressionId], references: [id], onDelete: Cascade)
  expressionId      Int

  @@index([hostId, venueIds, datetimeOfStart, datetimeOfEnd])
  @@schema("microservice/event-scheduling")
}

// todo: datetimeOfStart, datetimeOfEnd, week, dayOfWeek should be generated in prisma middleware.
model Event {
  id                Int              @id @default(autoincrement())
  status            EventStatus      @default(EDITING)
  hostId            String?          @db.Uuid
  datetimeOfStart   DateTime
  datetimeOfEnd     DateTime
  timeZone          String
  year              Int
  month             Int
  dayOfMonth        Int
  hour              Int
  minute            Int
  dayOfWeek         Int
  weekOfMonth       Int // The number of week in a month, it will be 1 to 6.
  weekOfYear        Int // The number of week in a month, it will be 1 to 53.
  minutesOfDuration Int
  mboData           Json?
  aiInfo            Json?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  deletedAt         DateTime? // Support soft deletion
  changeLogs        EventChangeLog[]
  issues            EventIssue[]
  type              EventType        @relation(fields: [typeId], references: [id], onDelete: Cascade)
  typeId            Int
  venue             EventVenue       @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId           Int
  container         EventContainer   @relation(fields: [containerId], references: [id], onDelete: Cascade)
  containerId       Int
  reservations      Reservation[]

  @@index([containerId, year, month, weekOfMonth, deletedAt])
  @@index([hostId, venueId, datetimeOfStart, datetimeOfEnd, deletedAt])
  @@index([deletedAt])
  @@schema("microservice/event-scheduling")
}

model EventChangeLog {
  id               Int                @id @default(autoincrement())
  type             EventChangeLogType @default(USER)
  description      String
  notedByUserId    String?            @db.Uuid
  eventContainerId Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  event            Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId          Int

  @@schema("microservice/event-scheduling")
}

model EventContainer {
  id            Int                  @id @default(autoincrement())
  name          String?
  status        EventContainerStatus @default(EDITING)
  dateOfOpening DateTime? // Use dateOfOpening and dateOfClosure together
  dateOfClosure DateTime?
  year          Int // Use year and month together
  month         Int
  timezone      String? // https://www.iplocate.com/en/resources/timezones/list-of-timezones
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  venue         EventVenue           @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId       Int
  events        Event[]

  @@schema("microservice/event-scheduling")
}

model EventHost {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status         EventHostStatus @default(ACTIVE)
  email          String?         @unique
  phone          String?         @unique
  password       String? // automatic hashing
  lastLoginAt    DateTime?
  fullName       String?
  firstName      String?
  middleName     String?
  lastName       String?
  tagIds         Int[]
  eventVenueIds  Int[] // event venue ids
  eventTypeIds   Int[] // event type ids
  eventHostTitle Int?
  quotaOfWeekMin Int?
  quotaOfWeekMax Int?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  roles          EventHostRole[]

  @@schema("microservice/event-scheduling")
}

model EventHostRole {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String      @unique
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  users       EventHost[]

  @@schema("microservice/event-scheduling")
}

model EventIssue {
  id          Int              @id @default(autoincrement())
  type        EventIssueType
  status      EventIssueStatus @default(UNREPAIRED)
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  event       Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     Int

  @@schema("microservice/event-scheduling")
}

model EventType {
  id                        Int      @id @default(autoincrement())
  name                      String
  aliases                   String[]
  minutesOfDuration         Int
  minutesOfBreak            Int?
  minutesInAdvanceToReserve Int?
  minutesInAdvanceToCancel  Int?
  tagId                     Int?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  events                    Event[]

  @@schema("microservice/event-scheduling")
}

model EventVenue {
  id                                  Int              @id @default(autoincrement())
  name                                String
  address                             String?
  address2                            String?
  city                                String?
  state                               String?
  country                             String?
  zipCode                             String?
  timeZone                            String?
  numberOfSeats                       Int              @default(1)
  minutesOfBreak                      Int              @default(0)
  hourOfDayStart                      Int              @default(6)
  hourOfDayEnd                        Int              @default(22)
  minuteOfDayStart                    Int              @default(0)
  minuteOfDayEnd                      Int              @default(0)
  tagIds                              Int[]
  createdAt                           DateTime         @default(now())
  updatedAt                           DateTime         @updatedAt
  containers                          EventContainer[]
  events                              Event[]

  @@schema("microservice/event-scheduling")
}

model Reservation {
  id           Int      @id @default(autoincrement())
  clientUserId String   @db.Uuid
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId      Int

  @@schema("microservice/event-scheduling")
}
