// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// !! ------------------------------------------------------------ //
// !!                       [Prisma] Issues                        //
// !! ------------------------------------------------------------ //
// * https://github.com/prisma/prisma/issues/4355                  //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ //

generator client {
  provider = "prisma-client-js"

  // Enable Full-Text Search which is only available for PostgreSQL.
  previewFeatures = ["multiSchema", "fullTextSearch"]

  // For production deployment.
  // binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  // binaryTargets   = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["microservice/account", "microservice/cron", "microservice/event-scheduling", "microservice/file-mgmt", "microservice/map", "microservice/notification", "microservice/order-mgmt", "microservice/project-mgmt", "microservice/queue", "microservice/stock-mgmt", "microservice/tag", "microservice/token", "microservice/workflow", "application/engined", "application/recruitment", "application/tc-request"]
}

// ! ------------------------------------------------------------ //
// !                [Microservice] Account models                 //
// ! ------------------------------------------------------------ //
// * Organization                                                 //
// * User                                                         //
// * UserAccessToken                                              //
// * UserRefreshToken                                             //
// * UserProfile                                                  //
// * Role                                                         //
// * RoutePermission(unused)                                      //
// * ComponentPermission(unused)                                  //
// * EndpointPermission(unused)                                   //
// * Permission                                                   //
// * VerificationCode                                             //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model Organization {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roles     Role[]
  users     User[]

  @@schema("microservice/account")
}

model User {
  // [1] The 'User' and 'VerificationCode' models are both used for logging in.
  // [2] The 'User' is designed for long-term use and the 'VerificationCode' is designed for short-term use.
  // [3] Actually, the 'User' model should be named 'UserPassword' and the 'VerificationCode' should be named 'UserVerificationCode'.
  id               String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email            String?                  @unique
  phone            String?                  @unique
  password         String? // automatic hashing
  status           UserStatus               @default(ACTIVE)
  lastLoginAt      DateTime?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  organization     Organization?            @relation(fields: [organizationId], references: [id])
  organizationId   String?                  @db.Uuid
  profile          UserProfile?
  roles            Role[]
  // For recruitment application
  jobApplications  JobApplication[]
  holdingWorkflows JobApplicationWorkflow[]
  certifications   Certification[]

  @@schema("microservice/account")
}

enum UserStatus {
  ACTIVE
  INACTIVE

  @@schema("microservice/account")
}

model UserProfile {
  // !!! Customize this model for your specific application.
  id                       String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  prefix                   String?
  fullName                 String?
  firstName                String?
  middleName               String?
  lastName                 String?
  suffix                   String?
  dateOfBirth              DateTime?          @db.Date
  gender                   UserProfileGender?
  emails                   Json[]
  phones                   Json[]
  websites                 Json? // {'facebook': 'https://www.facebook.com/elonmusk', 'twitter': 'https://twitter.com/elonmusk'}
  picture                  String?
  tagIds                   Int[]
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  user                     User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   String             @unique @db.Uuid
  // For fitness application
  eventVenueIds            Int[] // event venue ids
  eventTypeIds             Int[] // event type ids
  coachingTenure           Int? // 5:Senior Master Coach, 4:Pro, 3:Senior, 2:Standard, 1:New
  quotaOfWeekMinPreference Int?
  quotaOfWeekMaxPreference Int?
  quotaOfWeek              Int? // The number of classes a coach should teach at least in a week.

  @@index([userId])
  @@schema("microservice/account")
}

enum UserProfileGender {
  Male
  Female
  Intersex

  @@schema("microservice/account")
}

model Role {
  // A role is a subgroup of a user group with some specified permissions.
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String        @unique
  description    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @db.Uuid
  users          User[]

  @@unique([name, organizationId])
  @@schema("microservice/account")
}

model Permission {
  // Permission of Resource
  id                Int               @id @default(autoincrement())
  action            PermissionAction
  resource          String
  where             Json? // an object of where expression meets the Prisma syntax.
  inverted          Boolean? // indicates whether rule allows or forbids something
  reason            String? // message which explains why rule is forbidden
  trustedEntityType TrustedEntityType
  trustedEntityId   String            @db.Uuid
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@schema("microservice/account")
}

enum PermissionAction {
  Manage
  List
  Get
  Create
  Update
  Delete

  @@schema("microservice/account")
}

enum TrustedEntityType {
  ORGANIZATION
  ROLE
  USER

  @@schema("microservice/account")
}

model VerificationCode {
  id        Int                    @id @default(autoincrement())
  email     String?
  phone     String?
  code      String
  status    VerificationCodeStatus
  use       VerificationCodeUse
  expiredAt DateTime
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt

  @@schema("microservice/account")
}

enum VerificationCodeStatus {
  ACTIVE
  INACTIVE

  @@schema("microservice/account")
}

enum VerificationCodeUse {
  UNKNOWN
  // For generating JWT.
  LOGIN_BY_EMAIL
  LOGIN_BY_PHONE
  // For closing and recovering account.
  CLOSE_ACCOUNT_BY_EMAIL
  CLOSE_ACCOUNT_BY_PHONE
  RECOVER_ACCOUNT_BY_EMAIL
  RECOVER_ACCOUNT_BY_PHONE
  // For other operations
  BIND_EMAIL
  BIND_PHONE
  CHANGE_PASSWORD
  RESET_PASSWORD

  @@schema("microservice/account")
}

// ! ------------------------------------------------------------ //
// !           [Microservice] Cron models                         //
// ! ------------------------------------------------------------ //
// * CronTask (This is an example model.)                             //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model CronTask {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  expression String
  command    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@schema("microservice/cron")
}

// !! ------------------------------------------------------------ //
// !!            [Microservice] Event scheduling models            //
// !! ------------------------------------------------------------ //
// * AvailabilityExpression                                        //
// * AvailabilityTimeslot                                          //
// * EventContainer                                                //
// * EventType                                                     //
// * EventVenue                                                    //
// * Event                                                         //
// * Reservation                                                   //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ //
enum AvailabilityExpressionStatus {
  EDITING
  PUBLISHING
  PUBLISHED

  @@schema("microservice/event-scheduling")
}

enum AvailabilityTimeslotStatus {
  USABLE
  USED

  @@schema("microservice/event-scheduling")
}

enum EventIssueType {
  ERROR_NONEXISTENT_COACH
  ERROR_UNCONFIGURED_COACH
  ERROR_UNAVAILABLE_EVENT_TIME
  ERROR_CONFLICTING_EVENT_TIME
  ERROR_UNAVAILABLE_EVENT_TYPE
  ERROR_UNAVAILABLE_EVENT_VENUE
  WARNING_HAS_MORE_SUITABLE_COACH

  @@schema("microservice/event-scheduling")
}

enum EventIssueStatus {
  UNREPAIRED
  REPAIRED

  @@schema("microservice/event-scheduling")
}

enum EventContainerOrigin {
  EXTERNAL
  INTERNAL

  @@schema("microservice/event-scheduling")
}

enum EventContainerStatus {
  EDITING
  PUBLISHED

  @@schema("microservice/event-scheduling")
}

enum EventPublishStatus {
  INIT
  PENDING
  COMPLETED
  FAILED

  @@schema("microservice/event-scheduling")
}

enum EventChangeLogType {
  SYSTEM
  USER

  @@schema("microservice/event-scheduling")
}

model AvailabilityExpression {
  id                                     Int                          @id @default(autoincrement())
  name                                   String?
  status                                 AvailabilityExpressionStatus @default(EDITING)
  hostUserId                             String                       @db.Uuid
  venueIds                               Int[]
  cronExpressionsOfAvailableTimePoints   String[]
  cronExpressionsOfUnavailableTimePoints String[]
  dateOfOpening                          DateTime
  dateOfClosure                          DateTime?
  minutesOfDuration                      Int // Generally it should be 30 or 60
  reportedAt                             DateTime
  createdAt                              DateTime                     @default(now())
  updatedAt                              DateTime                     @updatedAt
  timeslots                              AvailabilityTimeslot[]

  @@schema("microservice/event-scheduling")
}

model AvailabilityTimeslot {
  id                Int                        @id @default(autoincrement())
  status            AvailabilityTimeslotStatus @default(USABLE)
  hostUserId        String                     @db.Uuid
  venueIds          Int[]
  datetimeOfStart   DateTime
  datetimeOfEnd     DateTime
  minutesOfTimeslot Int                        @default(5)
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  expression        AvailabilityExpression     @relation(fields: [expressionId], references: [id], onDelete: Cascade)
  expressionId      Int

  @@index([hostUserId, venueIds, datetimeOfStart, datetimeOfEnd])
  @@schema("microservice/event-scheduling")
}

// todo: datetimeOfStart, datetimeOfEnd, week, dayOfWeek should be generated in prisma middleware.
model Event {
  id                Int                @id @default(autoincrement())
  isLocked          Boolean            @default(false)
  isPublished       Boolean            @default(false)
  publishStatus     EventPublishStatus @default(INIT)
  hostUserId        String?            @db.Uuid
  datetimeOfStart   DateTime
  datetimeOfEnd     DateTime
  timeZone          String
  year              Int
  month             Int
  dayOfMonth        Int
  hour              Int
  minute            Int
  dayOfWeek         Int
  weekOfMonth       Int // The number of week in a month, it will be 1 to 6.
  weekOfYear        Int // The number of week in a month, it will be 1 to 53.
  minutesOfDuration Int
  mboData           Json?
  aiInfo            Json?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime? // Support soft deletion
  changeLogs        EventChangeLog[]
  issues            EventIssue[]
  type              EventType          @relation(fields: [typeId], references: [id], onDelete: Cascade)
  typeId            Int
  venue             EventVenue         @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId           Int
  container         EventContainer     @relation(fields: [containerId], references: [id], onDelete: Cascade)
  containerId       Int
  reservations      Reservation[]

  @@index([containerId, year, month, weekOfMonth, deletedAt])
  @@index([hostUserId, venueId, datetimeOfStart, datetimeOfEnd, deletedAt])
  @@index([deletedAt])
  @@schema("microservice/event-scheduling")
}

model EventIssue {
  id          Int              @id @default(autoincrement())
  type        EventIssueType
  status      EventIssueStatus @default(UNREPAIRED)
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  event       Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     Int

  @@schema("microservice/event-scheduling")
}

model EventType {
  id                        Int      @id @default(autoincrement())
  name                      String
  aliases                   String[]
  minutesOfDuration         Int
  minutesOfBreak            Int?
  minutesInAdvanceToReserve Int?
  minutesInAdvanceToCancel  Int?
  tagId                     Int?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  events                    Event[]

  @@schema("microservice/event-scheduling")
}

model EventVenue {
  id                                  Int              @id @default(autoincrement())
  name                                String
  numberOfSeats                       Int              @default(1)
  minutesOfBreak                      Int              @default(0)
  hourOfDayStart                      Int              @default(6)
  hourOfDayEnd                        Int              @default(22)
  minuteOfDayStart                    Int              @default(0)
  minuteOfDayEnd                      Int              @default(0)
  tagIds                              Int[]
  placeId                             Int? // Map module
  createdAt                           DateTime         @default(now())
  updatedAt                           DateTime         @updatedAt
  containers                          EventContainer[]
  events                              Event[]
  // For solidcore mindbody fields
  similarVenueIds                     Int[]
  preferredProgramId                  Int?
  external_studioName                 String?
  external_studioId                   Int?
  external_locationId                 Int?
  external_resourceId                 Int?             @default(1)
  external_staffPayRate               Int?             @default(10)
  external_maxCapacity                Int?             @default(20)
  external_pricingOptionsProductIds   Int[]            @default([1])
  external_allowDateForwardEnrollment Boolean?         @default(true)
  external_allowOpenEnrollment        Boolean?         @default(true)
  external_bookingStatus              String?          @default("Free")
  external_waitlistCapacity           Int?             @default(10)
  external_webCapacity                Int?             @default(10)

  @@unique([external_studioId, external_locationId])
  @@schema("microservice/event-scheduling")
}

model EventContainer {
  id            Int                  @id @default(autoincrement())
  name          String?
  origin        EventContainerOrigin @default(INTERNAL)
  status        EventContainerStatus @default(EDITING)
  dateOfOpening DateTime? // Use dateOfOpening and dateOfClosure together
  dateOfClosure DateTime?
  year          Int // Use year and month together
  month         Int
  timezone      String? // https://www.iplocate.com/en/resources/timezones/list-of-timezones
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  venue         EventVenue           @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId       Int
  events        Event[]

  @@schema("microservice/event-scheduling")
}

model EventChangeLog {
  id               Int                @id @default(autoincrement())
  type             EventChangeLogType @default(USER)
  description      String
  notedByUserId    String?            @db.Uuid
  eventContainerId Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  event            Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId          Int

  @@schema("microservice/event-scheduling")
}

model Reservation {
  id           Int      @id @default(autoincrement())
  clientUserId String   @db.Uuid
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId      Int

  @@schema("microservice/event-scheduling")
}

model MindbodySite {
  id        Int      @id @default(autoincrement())
  siteId    Int      @unique
  siteName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("microservice/event-scheduling")
}

enum AsyncEventStatus {
  INIT
  PENDING
  REMOVING
  REMOVED
  PUBLISHING
  COMPLETED
  FAILED

  @@schema("microservice/event-scheduling")
}

model AsyncPublish {
  id           Int              @id @default(autoincrement())
  status       AsyncEventStatus @default(INIT)
  containerId  Int
  curOldEvents Int              @default(0)
  oldEvents    Int              @default(0)
  curEventsCnt Int              @default(0)
  eventsCnt    Int              @default(0)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@schema("microservice/event-scheduling")
}

model mboLog {
  id             Int      @id @default(autoincrement())
  asyncPublishId Int?
  containerId    Int?
  eventId        Int?
  funcName       String?
  studioId       Int
  locationId     Int
  params         Json?
  resp           Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([funcName])
  @@index([containerId])
  @@index([studioId, locationId])
  @@schema("microservice/event-scheduling")
}

// !! ------------------------------------------------------------ //
// !!            [Microservice] File Management models             //
// !! ------------------------------------------------------------ //
// * File                                                          //
// * Folder                                                        //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ //

model File {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  originalName String
  mimeType     String
  size         Int?
  localPath    String? // Contains path and filename.
  localName    String?
  s3Bucket     String
  s3Key        String // File name in S3 bucket.
  s3Response   Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  folder       Folder?  @relation(fields: [folderId], references: [id])
  folderId     Int?

  @@schema("microservice/file-mgmt")
}

model Folder {
  id        Int      @id @default(autoincrement())
  name      String
  parentId  String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  files     File[]

  @@unique([name, parentId])
  @@schema("microservice/file-mgmt")
}

// !! ------------------------------------------------------------ //
// !!            [Microservice] Map models                         //
// !! ------------------------------------------------------------ //
// * Place                                                         //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ //

model Place {
  id                   Int      @id @default(autoincrement())
  name                 String?
  address              String?
  city                 String?
  state                String?
  country              String?
  timeZone             String? // https://www.iplocate.com/en/resources/timezones/list-of-timezones
  googleMapPlaceId     String?
  googleMapPlaceResult Json?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@schema("microservice/map")
}

// !! ------------------------------------------------------------ //
// !!            [Microservice] Notification models                //
// !! ------------------------------------------------------------ //
// * EmailNotification                                             //
// * SmsNotification                                               //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ //

model EmailNotification {
  id                Int      @id @default(autoincrement())
  payload           Json // The notification content for one email address.
  pinpointRequestId String? // RequestId is the Pinpoint request id. One request can contain multiple text messages.
  pinpointMessageId String? // MessageId is the email message id.
  pinpointResponse  Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@schema("microservice/notification")
}

model SmsNotification {
  id                Int      @id @default(autoincrement())
  payload           Json // The notification content for one phone.
  pinpointRequestId String? // RequestId is the Pinpoint request id. One request can contain multiple text messages.
  pinpointMessageId String? // MessageId is the text message id.
  pinpointResponse  Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@schema("microservice/notification")
}

// !! ------------------------------------------------------------ //
// !!            [Microservice] Order models                       //
// !! ------------------------------------------------------------ //
// * Order                                                         //
// * OrderItem                                                     //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ //

model Order {
  id                  String                @id @default(cuid())
  status              String?
  totalPrice          Float
  totalTax            Float?
  currency            String
  note                String?
  items               OrderItem[]
  stripePaymentIntent StripePaymentIntent[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt

  @@schema("microservice/order-mgmt")
}

model OrderItem {
  id         String   @id @default(cuid())
  name       String
  totalPrice Float
  totalTax   Float?
  pieces     Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    String

  @@schema("microservice/order-mgmt")
}

model StripePaymentIntent {
  id           String   @id
  status       String
  amount       Float
  clientSecret String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  order        Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      String?

  @@schema("microservice/order-mgmt")
}

// ! ------------------------------------------------------------ //
// !          [Microservice] Project Management models             //
// ! ------------------------------------------------------------ //
// * Project                                                      //
// * ProjectNote                                                  //
// * ProjectCheckpoint                                            //
// * ProjectEnvironment                                           //
// * InfrastructureStack                                          //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

enum ProjectState {
  PLANNING
  DESIGNING
  DEVELOPING
  DONE

  @@schema("microservice/project-mgmt")
}

enum ProjectCheckpointState {
  TODO
  PROCESSING
  DONE

  @@schema("microservice/project-mgmt")
}

enum ProjectCheckpointType {
  MANAGER_PRODUCT_REQUIREMENTS
  MANAGER_PROJECT_KANBAN
  DESIGNER_WIREFRAMES
  DESIGNER_PROTOTYPES
  DEVELOPER_ACCOUNT_APPLE
  DEVELOPER_ACCOUNT_GOOGLE
  DEVELOPER_BACKEND_REPO
  DEVELOPER_BACKEND_FRAMEWORK
  DEVELOPER_BACKEND_DATABASE
  DEVELOPER_BACKEND_API
  DEVELOPER_FRONTEND_REPO
  DEVELOPER_FRONTEND_FRAMEWORK
  DEVELOPER_INFRASTRUCTURE

  @@schema("microservice/project-mgmt")
}

enum InfrastructureStackManager {
  CloudFormation
  Pulumi

  @@schema("microservice/project-mgmt")
}

enum InfrastructureStackState {
  PENDING
  BUILD_PROCESSING
  BUILD_SUCCEEDED
  BUILD_FAILED
  DESTROY_PROCESSING
  DESTROY_SUCCEEDED
  DESTROY_FAILED

  @@schema("microservice/project-mgmt")
}

model Project {
  id           String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String               @unique
  state        ProjectState         @default(PLANNING)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  notes        ProjectNote[]
  checkpoints  ProjectCheckpoint[]
  environments ProjectEnvironment[]

  @@schema("microservice/project-mgmt")
}

model ProjectNote {
  id        Int      @id @default(autoincrement())
  section   String?
  label     String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?  @db.Uuid

  @@schema("microservice/project-mgmt")
}

model ProjectCheckpoint {
  id        Int                    @id @default(autoincrement())
  type      ProjectCheckpointType
  state     ProjectCheckpointState @default(TODO)
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  Project   Project                @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String                 @db.Uuid

  @@unique([type, projectId])
  @@schema("microservice/project-mgmt")
}

model ProjectEnvironment {
  id                   Int                   @id @default(autoincrement())
  name                 String
  awsAccountId         String?
  awsProfile           String?
  awsAccessKeyId       String?
  awsSecretAccessKey   String? // automatic hashing
  awsRegion            String?
  s3ForCloudformation  String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  project              Project               @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId            String                @db.Uuid
  infrastructureStacks InfrastructureStack[]

  @@schema("microservice/project-mgmt")
}

model InfrastructureStack {
  id                  String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String?                    @unique // Set default value via prisma middleware.
  manager             InfrastructureStackManager
  type                String
  params              Json?
  state               InfrastructureStackState   @default(PENDING)
  createStackOutput   Json?
  describeStackOutput Json?
  deleteStackOutput   Json?
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt
  environment         ProjectEnvironment         @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId       Int

  @@schema("microservice/project-mgmt")
}

// ! ------------------------------------------------------------ //
// !           [Microservice] Queue models                        //
// ! ------------------------------------------------------------ //
// * Task (This is an example model.)                             //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

enum QueueKeyType {
  STRING
  HASH
  LIST

  @@schema("microservice/queue")
}

enum QueueTaskState {
  PENDING
  DONE

  @@schema("microservice/queue")
}

model Queue {
  id        String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  keyName   String
  keyType   QueueKeyType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@schema("microservice/queue")
}

model QueueTask {
  id           Int            @id @default(autoincrement())
  name         String
  state        QueueTaskState @default(PENDING)
  group        String? // Provided by task microservice's client.
  payload      Json // Task content
  bullJobId    String?
  sqsMessageId String?
  sqsResponse  Json?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@schema("microservice/queue")
}

// !! ------------------------------------------------------------ //
// !!            [Microservice] Stock Management models        //
// !! ------------------------------------------------------------ //
// * Sku                                                          //
// * Folder                                                        //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ //

model Spu {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  skus      Sku[]

  @@schema("microservice/stock-mgmt")
}

model Sku {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  unitOfMeasurement UnitOfMeasurement
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  spu               Spu?              @relation(fields: [spuId], references: [id])
  spuId             String?           @db.Uuid
  warehouseSkus     WarehouseSku[]

  @@schema("microservice/stock-mgmt")
}

model Warehouse {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type           WarehouseType
  name           String
  placeId        Int?
  tagIds         Int[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  skus           WarehouseSku[]
  skuConversions SkuConversion[]
  skuTrails      SkuTrail[]

  @@schema("microservice/stock-mgmt")
}

model WarehouseSku {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId String    @db.Uuid
  sku         Sku       @relation(fields: [skuId], references: [id])
  skuId       String    @db.Uuid

  @@unique([warehouseId, skuId])
  @@schema("microservice/stock-mgmt")
}

model SkuConversion {
  id          Int                 @id @default(autoincrement())
  name        String
  tagIds      Int[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  items       SkuConversionItem[]
  warehouse   Warehouse           @relation(fields: [warehouseId], references: [id])
  warehouseId String              @db.Uuid

  @@schema("microservice/stock-mgmt")
}

model SkuConversionItem {
  id                 Int               @id @default(autoincrement())
  directionOfStock   DirectionOfStock
  warehouseSkuId     Int
  unitOfMeasurement  UnitOfMeasurement
  valueOfMeasurement Float
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  skuConversion      SkuConversion     @relation(fields: [skuConversionId], references: [id])
  skuConversionId    Int

  @@schema("microservice/stock-mgmt")
}

model SkuTrail {
  id                 Int               @id @default(autoincrement())
  directionOfStock   DirectionOfStock
  type               TransactionType
  warehouseSkuId     Int
  unitOfMeasurement  UnitOfMeasurement
  valueOfMeasurement Float
  priceOfUnit        Float
  priceOfTotal       Float
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  warehouse          Warehouse         @relation(fields: [warehouseId], references: [id])
  warehouseId        String            @db.Uuid

  @@schema("microservice/stock-mgmt")
}

enum UnitOfMeasurement {
  g
  kg
  piece
  dozon

  @@schema("microservice/stock-mgmt")
}

enum WarehouseType {
  Brand
  Store
  Supplier

  @@schema("microservice/stock-mgmt")
}

enum DirectionOfStock {
  IN
  OUT

  @@schema("microservice/stock-mgmt")
}

enum TransactionType {
  Purchase
  Split
  Sell
  Process
  Loss

  @@schema("microservice/stock-mgmt")
}

// ! ------------------------------------------------------------ //
// !           [Microservice] Tag  models                         //
// ! ------------------------------------------------------------ //
// * Tag                                                          //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model Tag {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  group     TagGroup? @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   Int?

  @@schema("microservice/tag")
}

model TagGroup {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tags      Tag[]

  @@schema("microservice/tag")
}

// ! ------------------------------------------------------------ //
// !           [Microservice] Token models                        //
// ! ------------------------------------------------------------ //
// * AccessToken                                                  //
// * RefreshToken                                                 //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model AccessToken {
  id        Int      @id @default(autoincrement())
  userId    String   @db.Uuid
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("microservice/token")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  userId    String   @db.Uuid
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("microservice/token")
}

// ! ------------------------------------------------------------ //
// !             [Microservice] Workflow models                   //
// ! ------------------------------------------------------------ //
// * Workflow                                                     //
// * WorkflowView                                                 //
// * WorkflowViewComponent                                        //
// * WorkflowState                                                //
// * WorkflowRoute                                                //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //
model Workflow {
  id          String          @id @default(uuid())
  name        String          @unique
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  views       WorkflowView[]
  states      WorkflowState[]

  @@schema("microservice/workflow")
}

model WorkflowView {
  id             Int                     @id @default(autoincrement())
  name           String
  description    String?
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  components     WorkflowViewComponent[]
  outboundRoutes WorkflowRoute[]         @relation("outboundRoutes")
  inboundRoutes  WorkflowRoute[]         @relation("inboundRoutes")
  workflow       Workflow                @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId     String

  @@unique([name, workflowId])
  @@schema("microservice/workflow")
}

model WorkflowViewComponent {
  id         Int                       @id @default(autoincrement())
  type       WorkflowViewComponentType
  sort       Int
  properties Json
  createdAt  DateTime                  @default(now())
  updatedAt  DateTime                  @updatedAt
  view       WorkflowView              @relation(fields: [viewId], references: [id], onDelete: Cascade)
  viewId     Int

  @@schema("microservice/workflow")
}

enum WorkflowViewComponentType {
  INFO_Title
  INFO_Description
  INFO_Image
  INPUT_String
  INPUT_Number
  INPUT_Date
  INPUT_File

  @@schema("microservice/workflow")
}

enum WorkflowViewComponentTypePrefix {
  INFO
  INPUT

  @@schema("microservice/workflow")
}

model WorkflowState {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  routes      WorkflowRoute[]
  workflow    Workflow        @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId  String

  @@unique([name, workflowId])
  @@schema("microservice/workflow")
}

model WorkflowRoute {
  id         Int           @id @default(autoincrement())
  startSign  Boolean       @default(false)
  view       WorkflowView  @relation("outboundRoutes", fields: [viewId], references: [id], onDelete: Cascade)
  viewId     Int
  state      WorkflowState @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId    Int
  nextView   WorkflowView  @relation("inboundRoutes", fields: [nextViewId], references: [id], onDelete: Cascade)
  nextViewId Int
  nextRoleId String?       @db.Uuid // The next role to take over the next step.
  nextUserId String?       @db.Uuid // The next user to take over the next step.
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@unique([viewId, stateId])
  @@schema("microservice/workflow")
}

// ! ------------------------------------------------------------ //
// !               [Application] Engine D models                  //
// ! ------------------------------------------------------------ //
// * PostgresqlDatasource                                         //
// * PostgresqlDatasourceConstraint                               //
// * PostgresqlDatasourceTable                                    //
// * PostgresqlDatasourceTableColumn                              //
// * ------------------------------------------------------------ //
// * ElasticsearchDatasource                                      //
// * ElasticsearchDatasourceIndex                                 //
// * ElasticsearchDatasourceIndexField                            //
// * ------------------------------------------------------------ //
// * DatatransPipeline                                            //
// * DatatransMission                                             //
// * ------------------------------------------------------------ //
// * ElasticsearchDataboard                                       //
// * ElasticsearchDataboardColumn                                 //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model PostgresqlDatasource {
  id          String                           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  host        String
  port        Int
  database    String
  schema      String
  state       PostgresqlDatasourceState        @default(NOT_LOADED)
  createdAt   DateTime                         @default(now())
  updatedAt   DateTime                         @updatedAt
  tables      PostgresqlDatasourceTable[]
  constraints PostgresqlDatasourceConstraint[]

  @@schema("application/engined")
}

enum PostgresqlDatasourceState {
  LOADED
  NOT_LOADED

  @@schema("application/engined")
}

model PostgresqlDatasourceConstraint {
  id           Int                                   @id @default(autoincrement())
  schema       String // The schema name.
  table        String // The table name.
  keyColumn    String // The table's primary key column or foreign key column.
  keyType      PostgresqlDatasourceConstraintKeyType
  foreignTable String? // Has value when the type is FOREIGN_KEY. 
  createdAt    DateTime                              @default(now())
  updatedAt    DateTime                              @updatedAt
  datasource   PostgresqlDatasource                  @relation(fields: [datasourceId], references: [id], onDelete: Cascade)
  datasourceId String                                @db.Uuid

  @@schema("application/engined")
}

enum PostgresqlDatasourceConstraintKeyType {
  PRIMARY_KEY
  FOREIGN_KEY

  @@schema("application/engined")
}

model PostgresqlDatasourceTable {
  id                 Int                               @id @default(autoincrement())
  name               String
  schema             String
  createdAt          DateTime                          @default(now())
  updatedAt          DateTime                          @updatedAt
  datasource         PostgresqlDatasource              @relation(fields: [datasourceId], references: [id], onDelete: Cascade)
  datasourceId       String                            @db.Uuid
  columns            PostgresqlDatasourceTableColumn[]
  datatransPipelines DatatransPipeline[]

  @@schema("application/engined")
}

model PostgresqlDatasourceTableColumn {
  id              Int                       @id @default(autoincrement())
  name            String // The column name.
  type            String
  constraint      String?
  ordinalPosition Int? // The sort number of the column in the table.
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  table           PostgresqlDatasourceTable @relation(fields: [tableId], references: [id], onDelete: Cascade)
  tableId         Int

  @@schema("application/engined")
}

model ElasticsearchDatasource {
  id        String                         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  node      String
  state     ElasticsearchDatasourceState   @default(NOT_LOADED)
  createdAt DateTime                       @default(now())
  updatedAt DateTime                       @updatedAt
  indices   ElasticsearchDatasourceIndex[]

  @@schema("application/engined")
}

enum ElasticsearchDatasourceState {
  LOADED
  NOT_LOADED

  @@schema("application/engined")
}

model ElasticsearchDatasourceIndex {
  id                 Int                                 @id @default(autoincrement())
  name               String
  state              ElasticsearchDatasourceIndexState   @default(NO_MAPPING)
  createdAt          DateTime                            @default(now())
  updatedAt          DateTime                            @updatedAt
  datasource         ElasticsearchDatasource             @relation(fields: [datasourceId], references: [id], onDelete: Cascade)
  datasourceId       String                              @db.Uuid
  fields             ElasticsearchDatasourceIndexField[]
  databoards         ElasticsearchDataboard[]
  datatransPipelines DatatransPipeline[]

  @@schema("application/engined")
}

enum ElasticsearchDatasourceIndexState {
  NO_MAPPING
  HAS_MAPPING

  @@schema("application/engined")
}

model ElasticsearchDatasourceIndexField {
  id               Int                            @id @default(autoincrement())
  name             String // The field name. 
  type             String?
  fields           Json?
  properties       Json?
  createdAt        DateTime                       @default(now())
  updatedAt        DateTime                       @updatedAt
  index            ElasticsearchDatasourceIndex   @relation(fields: [indexId], references: [id], onDelete: Cascade)
  indexId          Int
  databoardColumns ElasticsearchDataboardColumn[]

  @@schema("application/engined")
}

model DatatransPipeline {
  id                String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  hasManyTables     String[] // The child tables should be loaded into the payload to be transported.
  belongsToTables   String[] // The parent tables should be loaded into the payload to be transported.
  createdAt         DateTime                     @default(now())
  updatedAt         DateTime                     @updatedAt
  fromTable         PostgresqlDatasourceTable    @relation(fields: [fromTableId], references: [id], onDelete: Cascade)
  fromTableId       Int
  toIndex           ElasticsearchDatasourceIndex @relation(fields: [toIndexId], references: [id])
  toIndexId         Int
  datatransMissions DatatransMission[]

  @@schema("application/engined")
}

model DatatransMission {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  state               DatatransMissionState @default(PENDING)
  numberOfRecords     Int // Number of records that will be sent from datasource table
  numberOfBatches     Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  datatransPipeline   DatatransPipeline     @relation(fields: [datatransPipelineId], references: [id])
  datatransPipelineId String                @db.Uuid
  tasks               DatatransTask[]

  @@schema("application/engined")
}

enum DatatransMissionState {
  PENDING
  SPLIT
  STARTED
  STOPPED

  @@schema("application/engined")
}

model DatatransTask {
  id           Int                @id @default(autoincrement())
  state        DatatransTaskState @default(PENDING)
  take         Int
  skip         Int
  sqsMessageId String?
  sqsResponse  Json?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  mission      DatatransMission   @relation(fields: [missionId], references: [id], onDelete: Cascade)
  missionId    String             @db.Uuid

  @@schema("application/engined")
}

enum DatatransTaskState {
  PENDING
  IN_QUEUE
  DONE

  @@schema("application/engined")
}

model ElasticsearchDataboard {
  id                String                         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  state             ElasticsearchDataboardState    @default(NOT_LOADED)
  description       String?
  createdAt         DateTime                       @default(now())
  updatedAt         DateTime                       @updatedAt
  datasourceIndex   ElasticsearchDatasourceIndex   @relation(fields: [datasourceIndexId], references: [id])
  datasourceIndexId Int
  columns           ElasticsearchDataboardColumn[]

  @@schema("application/engined")
}

enum ElasticsearchDataboardState {
  LOADED
  NOT_LOADED

  @@schema("application/engined")
}

model ElasticsearchDataboardColumn {
  id                     Int                                   @id @default(autoincrement())
  name                   String
  ordinalPosition        Int? // The sort number of the column on the board. The first position is 1.
  visible                Boolean                               @default(true)
  width                  Int?
  copyable               Boolean?
  searchable             Boolean?
  sortable               Boolean?
  tooltip                String?
  formatter              ElasticsearchDataboardColumnFormatter @default(NONE)
  createdAt              DateTime                              @default(now())
  updatedAt              DateTime                              @updatedAt
  databoard              ElasticsearchDataboard                @relation(fields: [databoardId], references: [id], onDelete: Cascade)
  databoardId            String                                @db.Uuid
  datasourceIndexField   ElasticsearchDatasourceIndexField     @relation(fields: [datasourceIndexFieldId], references: [id])
  datasourceIndexFieldId Int

  @@schema("application/engined")
}

enum ElasticsearchDataboardColumnFormatter {
  NONE
  OVER_DUE
  PAST_DUE
  DATE_TIME
  HIGHLIGHT_INCOMPLETE
  CURRENCY

  @@schema("application/engined")
}

// ! ------------------------------------------------------------ //
// !             [Application] Recruitment models                 //
// ! ------------------------------------------------------------ //
// * Certification                                                //
// * Job                                                          //
// * JobApplication                                               //
// * JobApplicationNote                                           //
// * JobApplicationTask                                           //
// * JobApplicationTesting                                        //
// * JobApplicationTestingAttachment                              //
// * JobApplicationTestingLog                                     //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model Certification {
  id              Int      @id @default(autoincrement())
  name            String
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  candidateUser   User     @relation(fields: [candidateUserId], references: [id])
  candidateUserId String   @db.Uuid

  @@schema("application/recruitment")
}

model Job {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code        String
  type        JobType
  position    String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  placeId     Int?

  @@schema("application/recruitment")
}

enum JobType {
  Hourly
  Salaried

  @@schema("application/recruitment")
}

model JobApplication {
  id              String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  state           String?
  jobType         JobType
  jobCode         String? // Only available when jobType is Hourly.
  jobSite         String
  testTypes       String[]
  referredBy      String // This field should user.name or user.id
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  workflows       JobApplicationWorkflow[]
  candidateUser   User                     @relation(fields: [candidateUserId], references: [id])
  candidateUserId String                   @db.Uuid

  @@schema("application/recruitment")
}

model JobApplicationWorkflow {
  id                 String                         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt          DateTime                       @default(now())
  updatedAt          DateTime                       @updatedAt
  jobApplication     JobApplication                 @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  jobApplicationId   String                         @db.Uuid
  beingHeldByUser    User?                          @relation(fields: [beingHeldByUserId], references: [id])
  beingHeldByUserId  String?                        @db.Uuid
  payload            JobApplicationWorkflowPayload? // workflow payload
  files              JobApplicationWorkflowFile[] // work payload
  notes              JobApplicationWorkflowNote[] // workflow payload
  tasks              JobApplicationWorkflowTask[] // workflow payload
  trails             JobApplicationWorkflowTrail[]
  // Below fields copy from latest workflow step.
  stateId            Int
  nextViewId         Int
  nextRoleId         String?
  processedByUserIds String[] // Store id of users who have processed this workflow.

  @@schema("application/recruitment")
}

model JobApplicationWorkflowTrail {
  id                Int                    @id @default(autoincrement())
  viewId            Int
  stateId           Int // The state that is selected in this step.
  nextViewId        Int
  nextRoleId        String?                @db.Uuid // The role who will process the next step.
  processedByUserId String                 @db.Uuid // The user who processed this step.
  comment           String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  workflow          JobApplicationWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId        String                 @db.Uuid

  @@schema("application/recruitment")
}

model JobApplicationWorkflowPayload {
  id                  Int                    @id @default(autoincrement())
  testType            String?
  testSite            String?
  appointmentStartsAt DateTime?
  appointmentEndsAt   DateTime?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  workflow            JobApplicationWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId          String                 @unique @db.Uuid

  @@schema("application/recruitment")
}

model JobApplicationWorkflowFile {
  id             Int                    @id @default(autoincrement())
  fileId         String                 @db.Uuid
  originalName   String
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  workflow       JobApplicationWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId     String                 @db.Uuid
  workflowStepId Int

  @@schema("application/recruitment")
}

model JobApplicationWorkflowNote {
  id              Int                    @id @default(autoincrement())
  reporter        String?
  reporterUserId  String                 @db.Uuid
  reporterComment String
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  workflow        JobApplicationWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId      String                 @db.Uuid

  @@schema("application/recruitment")
}

model JobApplicationWorkflowTask {
  id              Int                             @id @default(autoincrement())
  reporter        String?
  reporterUserId  String                          @db.Uuid
  reporterComment String
  assignee        String?
  assigneeUserId  String                          @db.Uuid
  state           JobApplicationWorkflowTaskState @default(PENDING)
  createdAt       DateTime                        @default(now())
  updatedAt       DateTime                        @updatedAt
  workflow        JobApplicationWorkflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId      String                          @db.Uuid

  @@schema("application/recruitment")
}

enum JobApplicationWorkflowTaskState {
  PENDING
  DONE

  @@schema("application/recruitment")
}

// ! ------------------------------------------------------------ //
// !             [Application] TC Request models                  //
// ! ------------------------------------------------------------ //
// * TcWorkflow                                                   //
// * TcWorkflowTrail                                              //
// * TcPayment                                                    //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄  //

model TcWorkflow {
  id                         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  registrationNumber         String
  orderId                    String? // Payment order
  status                     String
  reasonForRefusal           String?
  folderId                   Int
  fileIdForCertificate       String?
  // VIEW1_DETAILS
  title                      String?
  firstName                  String?
  middleName                 String?
  lastName                   String?
  fullName                   String?
  dateOfBirth                DateTime?         @db.Date
  gender                     String?
  address                    String?
  island                     String?
  district                   String?
  addressOutsideTC           String?
  landlinePhone              String?
  mobile                     String?
  email                      String? //  If you have made previous Certificate of Character applications, the email you enter here will replace any you have previously entered. This means that all email correspondence we send regarding previous applications will now be sent to this address.
  fileIdForRecentPhoto       String?           @db.Uuid
  // VIEW2_PURPOSE
  purpose                    String?
  typeOfEmployment           String?
  countryOfTravel            String?
  otherPurpose               String?
  intendedDateOfTravel       DateTime?         @db.Date
  fileIdForTravelProof       String?
  otherInformation           String? // If there is no information type "No"
  // VIEW3_PAYMENT
  // VIEW4_TYPE
  scopeOfConvictions         String?
  hasOutsideConviction       Boolean? // Yes or No
  outsideConviction          String? // If hasOutsideConviction == Yes, fill in this field.
  // VIEW5_MARITAL
  maritalStatus              String?
  isNameChanged              Boolean? // Name changed through Marriage or Deed Poll?
  preFirstName               String?
  preMiddleName              String?
  preLastName                String?
  // VIEW6_EMPLOYMENT
  occupation                 String?
  nameOfEmployer             String?
  addressOfEmployer          String?
  telephoneOfEmployer        String?
  emailOfEmployer            String?
  // VIEW7_TCUK_?
  isTcUk                     Boolean?
  // VIEW8_TCUK_YES
  isTc                       Boolean?
  fileIdOfTcPassport         String?           @db.Uuid
  fileIdOfTcCertificate      String?           @db.Uuid
  fileIdOfUkPassport         String?           @db.Uuid
  fileIdOfUkCertificate      String?           @db.Uuid
  // VIEW9_TCUK_NO
  fileIdOfForeignPassport    String?           @db.Uuid
  fileIdOfForeignCertificate String?           @db.Uuid
  passportNumber             String?
  dateOfIssue                DateTime?         @db.Date
  dateOfExpiry               DateTime?         @db.Date
  countryOfIssue             String?
  placeOfBirth               String?
  // nationality                String
  // otherNationality           String?
  statusCardNumber           String?
  dateOfStatusCardIssue      DateTime?         @db.Date
  dateOfRequest              DateTime          @default(now()) @db.Date
  createdAt                  DateTime          @default(now())
  updatedAt                  DateTime          @updatedAt
  // Below fields copy from latest workflow trail.
  view                       String
  state                      String
  nextView                   String
  nextRoleId                 String?
  processedByUserIds         String[] // Store id of users who have processed this workflow.
  // Workflow trails
  trails                     TcWorkflowTrail[]

  @@schema("application/tc-request")
}

model TcWorkflowTrail {
  id                Int        @id @default(autoincrement())
  view              String
  state             String // The state that is selected in this step.
  nextView          String
  nextRoleId        String?    @db.Uuid // The role who will process the next step.
  processedByUserId String?    @db.Uuid // The user who processed this step.
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  workflow          TcWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId        String     @db.Uuid

  @@schema("application/tc-request")
}
