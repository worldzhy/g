// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

// !! ------------------------------------------------------------ //
// !!                       [Prisma] Issues                        //
// !! ------------------------------------------------------------ //
// * https://github.com/prisma/prisma/issues/4355                  //
// * ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ ⌄ //

generator client {
  provider = "prisma-client-js"

  // Enable Full-Text Search which is only available for PostgreSQL.
  previewFeatures = ["multiSchema", "fullTextSearch", "prismaSchemaFolder"]

  // For production deployment.
  // binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  // binaryTargets   = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["application", "microservice/account", "microservice/cloudformation", "microservice/cron", "microservice/event-scheduling", "microservice/map", "microservice/notification", "microservice/order-mgmt", "microservice/project-mgmt", "microservice/queue", "microservice/stock-mgmt", "microservice/storage", "microservice/tag", "microservice/workflow", "microservice/people-finder", "microservice/shortcut"]
}

model Currency {
  id               Int      @id @default(autoincrement())
  currency         String   @unique
  delisted         Boolean
  withdrawDisabled Boolean
  withdrawDelayed  Boolean
  depositDisabled  Boolean
  tradeDisabled    Boolean
  fixedRate        String?
  chain            String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@schema("application")
}

model CurrencyPair {
  id              String   @id // currency_pair
  base            String
  quote           String
  fee             String?
  minBaseAmount   String?
  minQuoteAmount  String?
  maxBaseAmount   String?
  maxQuoteAmount  String?
  amountPrecision Int?
  precision       Int?
  tradeStatus     String // untradable, buyable, sellable, tradable
  sellStart       Int // 允许卖出时间，秒级 Unix 时间戳
  buyStart        Int // 允许买入时间，秒级 Unix 时间戳
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@schema("application")
}

model TradeTask {
  id          Int      @id @default(autoincrement())
  status      String   @default("waiting") // waiting, complete
  base        String
  quote       String
  quoteAmount Float
  buyStart    Int // 允许买入时间，秒级 Unix 时间戳
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@schema("application")
}

model Order {
  id                 String   @id
  text               String
  amendText          String
  createTime         String // 秒级 Unix 时间戳
  updateTime         String
  createTimeMs       Int // 毫秒级 Unix 时间戳
  updateTimeMs       Int
  status             String?
  currencyPair       String
  type               String
  account            String
  side               String
  amount             String
  price              String
  timeInForce        String
  icebery            String?
  letf               String?
  filledAmount       String?
  fillPrice          String
  filledTotal        String
  avgDealPrice       String
  fee                String
  feeCurrency        String
  pointFee           String
  gtFee              String
  gtMakerFee         String
  gtTakerFee         String
  gtDiscount         Boolean
  rebatedFee         String
  rebatedFeeCurrency String
  stpId              String?
  stpAct             String?
  finishAs           String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@schema("application")
}
